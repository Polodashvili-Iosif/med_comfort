# Generated by Django 5.1.3 on 2025-04-01 10:58

import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clinics', '0001_initial'),
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DoctorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Категория врача')),
            ],
            options={
                'verbose_name': 'Категория врача',
                'verbose_name_plural': 'Категории врачей',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Специальность')),
            ],
            options={
                'verbose_name': 'Специальность',
                'verbose_name_plural': 'Специальности',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name='Отчество')),
                ('full_name', models.CharField(db_index=True, editable=False, max_length=100, verbose_name='Полное имя')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Номер телефона')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Электронная почта')),
                ('patient_category', models.CharField(choices=[('adult', 'Взрослый'), ('child', 'Детский'), ('both', 'Взрослый и детский')], db_index=True, max_length=10, verbose_name='Категория пациентов')),
                ('education', models.TextField(verbose_name='Образование')),
                ('experience', models.PositiveIntegerField(verbose_name='Опыт работы (лет)')),
                ('image', models.ImageField(blank=True, null=True, upload_to='doctors/images/', verbose_name='Фото')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Slug')),
                ('clinic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='doctors', to='clinics.clinic', verbose_name='Клиника')),
                ('doctor_category', models.ManyToManyField(blank=True, related_name='doctors', to='doctors.doctorcategory', verbose_name='Категории врача')),
            ],
            options={
                'verbose_name': 'Врач',
                'verbose_name_plural': 'Врачи',
                'ordering': ['last_name'],
            },
        ),
        migrations.CreateModel(
            name='DoctorService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Стоимость')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Длительность услуги')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_services', to='doctors.doctor', verbose_name='Врач')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_services', to='services.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Услуга врача',
                'verbose_name_plural': 'Услуги врачей',
                'unique_together': {('doctor', 'service')},
            },
        ),
        migrations.AddField(
            model_name='doctor',
            name='services',
            field=models.ManyToManyField(through='doctors.DoctorService', to='services.service', verbose_name='Оказываемые услуги'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='specialty',
            field=models.ManyToManyField(blank=True, related_name='doctors', to='doctors.specialty', verbose_name='Специальности врача'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_time', models.DateTimeField(verbose_name='Дата и время записи')),
                ('status', models.CharField(choices=[('pending', 'Ожидание подтверждения'), ('confirmed', 'Подтверждена'), ('cancelled', 'Отменена'), ('completed', 'Завершена')], default='pending', max_length=10, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='doctors.doctorservice', verbose_name='Услуга врача')),
            ],
            options={
                'verbose_name': 'Запись на приём',
                'verbose_name_plural': 'Записи на приём',
                'unique_together': {('service', 'appointment_time')},
            },
        ),
    ]
